install.packages("proxy")
install.packages("dplyr")
library(NLP)
library(tm)
library(proxy)
library(dplyr)

for(i in 1:10){
  x[i]<-c(as.String(iphone4$Reviews[i]))
}
x[5]
iphoneReviews <- x

df <- x

N.docs <- length(df)
names(df) <- paste0("doc", c(1:N.docs))

query1 <- "Does it support net 10"

#create a corpus

my.docs <- VectorSource(c(df, query1))
my.docs$Names <- c(names(df), "query1")

#preprocessing

my.corpus <- VCorpus(my.docs)
my.corpus <- tm_map(my.corpus, removePunctuation)
my.corpus <- tm_map(my.corpus, removeNumbers)
my.corpus <- tm_map(my.corpus, content_transformer(tolower))
my.corpus <- tm_map(my.corpus, stripWhitespace)
my.corpus <- tm_map(my.corpus,removeWords,stopwords("english"))

#create a tdm

term.doc.matrix.stm <- TermDocumentMatrix(my.corpus)
term.doc.matrix.stm
colnames(term.doc.matrix.stm) <- c(names(df), "query1")
inspect(term.doc.matrix.stm[0:10, ])

#making matrix dense

term.doc.matrix <- as.matrix(term.doc.matrix.stm)
cat("Dense matrix representation costs", object.size(term.doc.matrix), "bytes.\n", "Simple triplet matrix representation costs", object.size(term.doc.matrix.stm), "bytes.")

#tfidf

get.tf.idf.weights <- function(tf.vec) {
  # Computes tfidf weights from term frequency vector
  n.docs <- length(tf.vec)
  doc.frequency <- length(tf.vec[tf.vec > 0])
  weights <- rep(0, length(tf.vec))
  weights[tf.vec > 0] <- (1 + log2(tf.vec[tf.vec > 0])) * log2(n.docs/doc.frequency)
  return(weights)
}
# For a word appearing in 4 of 6 documents, occurring 1, 2, 3, and 6 times"
get.tf.idf.weights(c(1, 2, 3, 0, 0, 6))

#run the tfidf weighting function on every row of tdm

tfidf.matrix <- t(apply(term.doc.matrix, 1,FUN = function(row) {get.tf.idf.weights(row)}))
colnames(tfidf.matrix) <- colnames(term.doc.matrix)
tfidf.matrix[0:3, ]

#dot product geometry

angle <- seq(-pi, pi, by = pi/16)
plot(cos(angle) ~ angle, type = "b", xlab = "angle in radians",main = "Cosine similarity by angle")

tfidf.matrix <- scale(tfidf.matrix, center = FALSE,scale = sqrt(colSums(tfidf.matrix^2)))
tfidf.matrix[0:3, ]

#split

query.vector <- tfidf.matrix[, (N.docs + 1)]
tfidf.matrix <- tfidf.matrix[, 1:N.docs]

#cos theta

doc.scores <- t(query.vector) %*% tfidf.matrix

#rank by cosine similarities

results.df <- data.frame(doc = names(df), score = t(doc.scores),text = unlist(df))
results.df <- results.df[order(results.df$score, decreasing = TRUE), ]

#final

options(width = 2000)
print(results.df, row.names = FALSE, right = FALSE, digits = 2)

results.df$score
doc.scores
